name: Publish to npm

on:
  workflow_run:
    workflows:
      - Build
    types:
      - completed

jobs:
  publish:
    name: Build and publish package
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name || github.repository }}
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Configure npm registry
        run: npm config set registry https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Read package metadata
        id: package
        run: |
          name=$(node -p "require('./package.json').name")
          echo "name=$name" >> "$GITHUB_OUTPUT"

      - name: Fetch published version
        id: published
        run: |
          set +e
          package_name=${{ steps.package.outputs.name }}
          if [ -z "$package_name" ]; then
            echo "Package name could not be determined" >&2
            exit 1
          fi
          published=$(npm view "$package_name" version 2>/dev/null)
          status=$?
          set -e
          if [ $status -ne 0 ]; then
            published=""
          fi
          echo "version=$published" >> "$GITHUB_OUTPUT"

      - name: Determine next version
        id: version
        env:
          PUBLISHED_VERSION: ${{ steps.published.outputs.version }}
        run: node scripts/bump-version.js

      - name: Show release version
        run: echo "Publishing version ${{ steps.version.outputs.version }}"

      - name: Run build
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
