name: Publish to npm

on:
  workflow_run:
    workflows:
      - Build
    types:
      - completed

jobs:
  publish:
    name: Build and publish package
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Fetch published version
        id: published
        run: |
          set +e
          published=$(npm view "local-search-mcp" version 2>/dev/null)
          status=$?
          set -e
          if [ $status -ne 0 ]; then
            published=""
          fi
          echo "version=$published" >> "$GITHUB_OUTPUT"

      - name: Determine next version
        id: version
        env:
          PUBLISHED_VERSION: ${{ steps.published.outputs.version }}
        run: |
          node <<'NODE'
            const fs = require('fs');
            const path = require('path');

            const semverPattern = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/;

            const parseSemver = (version) => {
              const match = semverPattern.exec(version);
              if (!match) {
                console.error(`Version '${version}' is not valid semver in the form MAJOR.MINOR.PATCH.`);
                process.exit(1);
              }
              return {
                major: Number(match[1]),
                minor: Number(match[2]),
                patch: Number(match[3]),
              };
            };

            const compareSemver = (a, b) => {
              if (a.major !== b.major) return a.major - b.major;
              if (a.minor !== b.minor) return a.minor - b.minor;
              return a.patch - b.patch;
            };

            const pkgPath = path.resolve('package.json');
            const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
            const localSemver = parseSemver(pkg.version);

            let baseSemver = localSemver;
            const publishedVersion = process.env.PUBLISHED_VERSION;
            if (publishedVersion) {
              const publishedSemver = parseSemver(publishedVersion);
              if (compareSemver(publishedSemver, localSemver) > 0) {
                baseSemver = publishedSemver;
              }
            }

            const nextSemver = { ...baseSemver, patch: baseSemver.patch + 1 };
            const nextVersion = `${nextSemver.major}.${nextSemver.minor}.${nextSemver.patch}`;

            pkg.version = nextVersion;
            fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');

            const lockPath = path.resolve('package-lock.json');
            if (fs.existsSync(lockPath)) {
              const lock = JSON.parse(fs.readFileSync(lockPath, 'utf8'));
              let updated = false;

              if (lock.version && lock.version !== nextVersion) {
                lock.version = nextVersion;
                updated = true;
              }

              if (lock.packages && lock.packages[''] && lock.packages[''].version && lock.packages[''].version !== nextVersion) {
                lock.packages[''].version = nextVersion;
                updated = true;
              }

              if (updated) {
                fs.writeFileSync(lockPath, JSON.stringify(lock, null, 2) + '\n');
              }
            }

            fs.appendFileSync(process.env.GITHUB_OUTPUT, `version=${nextVersion}\n`);
NODE

      - name: Build package
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
